plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.openapi.generator" version "5.3.0"
    id "jacoco"
    id "org.flywaydb.flyway" version "8.5.4"
}

def projectName = 'gametrader-user-service'
group = 'com.gametrader'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://77.55.193.156/releases"
        allowInsecureProtocol true
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

build {

    dependsOn jacocoTestCoverageVerification

}

test {

    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

gradle.taskGraph.whenReady {
    graph ->
        if (graph.hasTask(stage)) {
            test.enabled = false
        }
}

//heroku task needed for deploy
task stage {
    dependsOn = ['build', 'clean']
}
tasks.whenTaskAdded {task ->
    if (task.name.contains("stage")) {
        test.enabled = false
    }
}
build.mustRunAfter clean

//jacoco
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {


        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.gametrader.*']

            excludes = ['com.gametrader.gametraderuserservice.GametraderUserServiceApplication',
                        'com.gametrader.gametraderuserservice.configuration.*',
                        'com.gametrader.gametraderuserservice.controller.TestController',
                        'com.gametrader.gametraderuserservice.dto.*',
                        'com.gametrader.gametraderuserservice.exception.*',
                        'com.gametrader.gametraderuserservice.filter.*',
                        'com.gametrader.gametraderuserservice.mapper.*',
                        'com.gametrader.gametraderuserservice.model.*',
                        'com.gametrader.gametraderuserservice.repository.*',
                        'com.gametrader.gametraderuserservice.util.*',
                        'com.gametrader.gametraderuserservice.controller.*']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}

//openapi
def jsonGeneratorFileName = 'gametrader-user-service.json'
def clientBasePackage = 'com.gametrader.api'

openApiGenerate {
    def desc = "$projectName-rest-client".toString()
    generatorName = 'java'
    library = 'resttemplate'
    inputSpec = "$rootDir/src/main/resources/open-api/$jsonGeneratorFileName".toString()
    //src/main/resources/open-api/$jsonGeneratorFileName".toString()
    templateDir = "$rootDir/src/main/resources/open-api/template".toString()
    outputDir = "$rootDir/client".toString()
    apiPackage = "$clientBasePackage".toString()
    invokerPackage = "$clientBasePackage".concat(".invoker")
    modelPackage = "$clientBasePackage".concat(".model")
    groupId = "$group".toString()
    id = desc
    skipValidateSpec = true
    version = "$project.version".toString()

    configOptions = [artifactDescription : desc,
                     reactive            : "false",
                     java11              : "true",
                     dateLibrary         : "java8",
                     serializationLibrary: "jackson",
                     enableBuilderSuport : "true"]
}

//flyway
flyway {
    url = "jdbc:$System.env.DATABASE_URL"
    user = "$System.env.DATABASE_USERNAME"
    password = "$System.env.DATABASE_PASSWORD"
    schemas = ['public']
}
